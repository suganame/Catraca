unit UFrmCatraca;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, UConstantes, UFuncoes,
  UFrmConfiguracoes,
  Vcl.Menus, Data.DB, Data.SqlExpr, DBXFirebird, Data.FMTBcd, Vcl.ExtCtrls,
  IWSystem, IniFiles,
  Vcl.Imaging.jpeg, Bilhete;

type
  TFrmCatraca = class(TForm)
    Button1: TButton;
    Button2: TButton;
    Button3: TButton;
    Button5: TButton;
    QryPrincipal: TSQLQuery;
    ScnBanco: TSQLConnection;
    PnStatusConexao: TPanel;
    LblStatus: TLabel;
    TmrStatusCatraca: TTimer;
    PnStatusCatraca: TPanel;
    LblTituloCatraca: TLabel;
    LblTextoCatraca: TLabel;
    TmrDelay: TTimer;
    PnBordaImagem: TPanel;
    PnFundoImagem: TPanel;
    ImgFotoAssociado: TImage;
    LblNome: TLabel;
    EdtNome: TEdit;
    LblCartao: TLabel;
    EdtCartao: TEdit;
    LblParcelasVencidas: TLabel;
    EdtParcelasVencidas: TEdit;
    LblTipoPessoa: TLabel;
    EdtTipoPessoa: TEdit;
    Button6: TButton;
    Button7: TButton;
    Button8: TButton;
    Button9: TButton;
    Button10: TButton;
    Button11: TButton;
    Edit1: TEdit;
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button4Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure TmrStatusCatracaTimer(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure TmrDelayTimer(Sender: TObject);
    procedure Button6Click(Sender: TObject);
    procedure Button7Click(Sender: TObject);
    procedure Button8Click(Sender: TObject);
    procedure Button11Click(Sender: TObject);
    procedure Button10Click(Sender: TObject);
    procedure Button9Click(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure Button5Click(Sender: TObject);
  private
    { Private declarations }

    function TestaConexaoInner(NumInner: Integer): Integer;
    function BinarioParaDecimal(valorBinario: String): String;
    function AbrirConexao: Integer;
    function ConfigurarEntradaMudancasOnline( NumInner: Integer ): Integer;

    procedure SetConfiguracaoInicialInner();
    procedure MaquinaDeEstados();
    procedure SetConfiguracaoInner( Modo: Integer );
    procedure HabilitarLadoCatraca( Lado: String );

    procedure SetStatusCatraca(Status: Integer);
    procedure EsconderFormulario();
    procedure MostrarFormulario();

    procedure ConectaBanco();
    function BuscaUsuario( Cartao : String ) : Boolean;
    procedure SetUsuario(Nome: String; Cartao: String; Tipo: String;
      ParcelasAtrasadas: Integer; IdPessoa: Integer);

    procedure GravaIni();
    procedure CarregaIni();

    // Procedimentos da maquina de estados
    procedure Conectar();
    procedure Reconectar();
    procedure EnviarConfigOffline();
    procedure EnviarConfigOnline();
    procedure EnviarDataHora();
    procedure EnviarMensagemPadrao();
    procedure ConfigurarEntradasOnline();
    procedure Pooling();
    procedure EnviarPingOnline();
    procedure TrataConfigsCartao();
    procedure LiberarCatraca();
    procedure FecharConexao();
    procedure MonitorarGiroCatraca();

  public
    { Public declarations }
  end;

var
  FrmCatraca: TFrmCatraca;

  InnerCadastrados: array of inner;
  TotalInners, InnerAtual, Delay: Integer;
  Retorno: Byte;
  Parar, LiberaEntrada, LiberaEntradaInvertida, LiberaSaida,
    LiberaSaidaInvertida: Boolean;
  ArqIni: TIniFile;
  CorAzul, CorVermelha, CorVerde, CorRoxa: TColor;

implementation

{$R *.dfm}

uses UFrmPrincipal;

function TFrmCatraca.BinarioParaDecimal(valorBinario: String): String;
var
  Decimal: Real;
  x, y: Integer;
begin

  Decimal := 0;
  y := 0;

  for x := Length(valorBinario) doWNTO 1 do
  begin

    Decimal := Decimal + (StrToFloat(valorBinario[x])) * Exp(y * Ln(2));
    y := y + 1;

  end;

  BinarioParaDecimal := FloatToStr(Decimal);

end;

Function TFrmCatraca.BuscaUsuario(Cartao : String) : Boolean;
var
  QtdDados: Byte;
  Nome, Tipo: String;
  ParcelasAtrasadas, IdPessoa: Integer;
begin

  ConectaBanco();

  with QryPrincipal do
  Begin

    try

      Try

        SQL.Clear;

        SQL.ADD('SELECT');
        SQL.ADD('    COUNT(*) AS QTD_DADOS');
        SQL.ADD('FROM');
        SQL.ADD('    ACC_PESSOA_CARTAO AS CARTAO');
        SQL.ADD('INNER JOIN');
        SQL.ADD('    VW_DADOS_PESSOAS AS DADOS');
        SQL.ADD('ON');
        SQL.ADD('    CARTAO.PESSOA_ID = DADOS.PESSOA_ID');
        SQL.ADD('LEFT JOIN');
        SQL.ADD('    PROC_CALC_DEB_TITULO(DADOS.TITULO) AS PARCELAS');
        SQL.ADD('ON');
        SQL.ADD('    1 = 1');
        SQL.ADD('WHERE');
        SQL.ADD('    CARTAO.CODIGO_CARTAO = ''' + Cartao + ''' ');

        Open;
        First;

        QtdDados := FieldByName('QTD_DADOS').AsInteger;

        Close;
        SQL.Clear;

        SQL.ADD('SELECT');
        SQL.ADD('    CARTAO.CODIGO_CARTAO AS CARTAO,');
        SQL.ADD('    DADOS.NOME AS NOME,');
        SQL.ADD('    DADOS.TITULO AS TITULO,');
        SQL.ADD('    DADOS.PESSOA_ID AS ID_PESSOA,');
        SQL.ADD('    DADOS.VINCULO_DEPENDENCIA AS TIPO,');
        SQL.ADD('    COALESCE(PARCELAS.MESES_ATRASADOS, 0) AS PARCELAS_ATRASADAS');
        SQL.ADD('FROM');
        SQL.ADD('    ACC_PESSOA_CARTAO AS CARTAO');
        SQL.ADD('INNER JOIN');
        SQL.ADD('    VW_DADOS_PESSOAS AS DADOS');
        SQL.ADD('ON');
        SQL.ADD('    CARTAO.PESSOA_ID = DADOS.PESSOA_ID');
        SQL.ADD('LEFT JOIN');
        SQL.ADD('    PROC_CALC_DEB_TITULO(DADOS.TITULO) AS PARCELAS');
        SQL.ADD('ON');
        SQL.ADD('    1 = 1');
        SQL.ADD('WHERE');
        SQL.ADD('    CARTAO.CODIGO_CARTAO = ''' + Cartao + ''' ');

        Open;
        First;

          Nome := FieldByName('NOME').AsString;
          Tipo := FieldByName('TIPO').AsString;
          ParcelasAtrasadas := FieldByName('PARCELAS_ATRASADAS').AsInteger;
          IdPessoa := FieldByName('ID_PESSOA').AsInteger;

        if (QtdDados = 0) then
        begin

          SetStatusCatraca(6);
          BuscaUsuario := False;

        end
        else
        begin

          if (FieldByName('PARCELAS_ATRASADAS').AsInteger = 1) then
          begin

            SetStatusCatraca(4);

          end
          else if (FieldByName('PARCELAS_ATRASADAS').AsInteger = 0) then
          begin

            SetStatusCatraca(3);

          end
          else
          begin

            SetStatusCatraca(5);

            SetUsuario(Nome, Cartao, Tipo, ParcelasAtrasadas, IdPessoa);

            BuscaUsuario := False;

          end;


          SetUsuario(Nome, Cartao, Tipo, ParcelasAtrasadas, IdPessoa);
          BuscaUsuario := True;

        end;

      Except

        ShowMessage('Não foi possível conectar com o banco');

      End;

    finally
      Close;
    end;

  End;

end;

procedure TFrmCatraca.Button10Click(Sender: TObject);
begin

  SetStatusCatraca(5);

end;

procedure TFrmCatraca.Button11Click(Sender: TObject);
begin

  SetStatusCatraca(6);

end;

procedure TFrmCatraca.Button1Click(Sender: TObject);
var
  origem, complemento, dia, mes, ano, hora, minuto, segundo: Byte;
  Cartao: array [0 .. 10] of Char;
  count, countTentativasEnvioComando: Integer;
begin

  // Seta Configurções Padrões do Inner
  SetConfiguracaoInicialInner();

  // Tenta abrir conexão com a porta padrão
  Retorno := AbrirConexao();
  // retorno := 0;

  // Caso Consiga, ele entra na maquina de estados
  if (Retorno = RET_OK) then
  begin

    Parar := False;
    MaquinaDeEstados();

  end;

end;

function TFrmCatraca.AbrirConexao: Integer;
var
  Porta: Integer;
  PadraoCartao: Integer;
begin

  DefinirTipoConexao(2);
  DefinirPadraoCartao(1);
  FecharPortaComunicacao();

  AbrirConexao := AbrirPortaComunicacao(3570);

end;

procedure TFrmCatraca.SetConfiguracaoInner(Modo: Integer);
begin
  with InnerCadastrados[InnerAtual] do
  begin

    DefinirPadraoCartao(PadraoCartao);

    if (Modo = MODO_OFFLINE) then
      ConfigurarInnerOffLine()
    else
      ConfigurarInnerOnLine();

    ConfigurarAcionamento1(6, 5);
    ConfigurarAcionamento2(0, 0);
    ConfigurarLeitor1(1);
    ConfigurarLeitor2(0);
    ConfigurarTipoLeitor(0);
    DefinirQuantidadeDigitosCartao(10);
    HabilitarTeclado(1, 0);
    RegistrarAcessoNegado(1);
    DefinirFuncaoDefaultLeitoresProximidade(10);
    DefinirFuncaoDefaultSensorBiometria(0);
    ReceberDataHoraDadosOnLine(1);

  end;

end;

procedure TFrmCatraca.SetStatusCatraca(Status: Integer);
begin
  {
    1 - Aguardando conexão
    2 - Aguardando entrada
    3 - Acesso liberado
    4 - Acesso liberado, mas com atrasado
    5 - Acesso Negado
    6 - Usuário não cadastrado
    7 - Saída liberada
  }

  case Status of

    1:
      begin

        EsconderFormulario();
        PnStatusCatraca.Color := CorVermelha;
        PnBordaImagem.Color := CorVermelha;
        LblTituloCatraca.Caption := 'Aguardando Conexão';
        LblTextoCatraca.Caption := 'Tentando conexão com a catraca.';

      end;

    2:
      begin

        EsconderFormulario();
        PnStatusCatraca.Color := CorAzul;
        PnBordaImagem.Color := CorAzul;
        LblTituloCatraca.Caption := 'Aguardando Entrada.';
        LblTextoCatraca.Caption := 'Passe o cartão ou digite o código.';

      end;

    3:
      begin

        MostrarFormulario();
        LblParcelasVencidas.Visible := False;
        EdtParcelasVencidas.Visible := False;

        PnStatusCatraca.Color := CorVerde;
        PnBordaImagem.Color := CorVerde;
        LblTituloCatraca.Caption := 'Acesso Liberado!';
        LblTextoCatraca.Caption := 'Seja bem vindo! Tenha uma ótima diversão.';

      end;

    4:
      begin

        MostrarFormulario();
        PnStatusCatraca.Color := CorRoxa;
        PnBordaImagem.Color := CorRoxa;
        LblTituloCatraca.Caption := 'Acesso Liberado!';
        LblTextoCatraca.Caption :=
          'Há parcelas atrasadas, verifique com a secretaria. Seja bem vindo!';

      end;

    5:
      begin

        MostrarFormulario();
        PnStatusCatraca.Color := CorVermelha;
        PnBordaImagem.Color := CorVermelha;
        LblTituloCatraca.Caption := 'Acesso Negado';
        LblTextoCatraca.Caption := 'Verique o motivo com a secretaria.';

      end;

    6:
      begin

        EsconderFormulario();
        PnStatusCatraca.Color := CorVermelha;
        PnBordaImagem.Color := CorVermelha;
        LblTituloCatraca.Caption := 'Acesso Negado';
        LblTextoCatraca.Caption :=
          'Usuário não cadastrado, verifique com a secretaria.';

      end;

    7:
      begin

        EsconderFormulario();
        PnStatusCatraca.Color := CorVerde;
        PnBordaImagem.Color := CorVerde;
        LblTituloCatraca.Caption := 'Saída Liberada';
        LblTextoCatraca.Caption := 'Volte sempre!';

      end;

  end;

end;

procedure TFrmCatraca.SetUsuario(Nome, Cartao, Tipo: String;
  ParcelasAtrasadas, IdPessoa: Integer);
begin

  EdtNome.text := Nome;
  EdtCartao.text := Cartao;

  if (Tipo <> 'TITULAR') then
  begin

    EdtTipoPessoa.text := 'DEPENDENTE';

  end
  else
  begin

    EdtTipoPessoa.text := Tipo;

  end;

  EdtParcelasVencidas.text := IntToStr(ParcelasAtrasadas);

  ImgFotoAssociado.Picture.LoadFromFile('C:\Users\Gui\Desktop\Catraca\Fotos\' + IntToStr(IdPessoa) + '.JPG' );



end;

procedure TFrmCatraca.Button2Click(Sender: TObject);
begin
  LblStatus.Caption := 'Parado';
  Parar := True;
  Application.ProcessMessages;
end;

procedure TFrmCatraca.Button4Click(Sender: TObject);
begin
  ConectaBanco();
end;

procedure TFrmCatraca.Button5Click(Sender: TObject);
begin
  BuscaUsuario(Edit1.Text);
end;

procedure TFrmCatraca.Button6Click(Sender: TObject);
begin

  SetStatusCatraca(1);

end;

procedure TFrmCatraca.Button7Click(Sender: TObject);
begin

  SetStatusCatraca(4);

end;

procedure TFrmCatraca.Button8Click(Sender: TObject);
begin

  SetStatusCatraca(2);

end;

procedure TFrmCatraca.Button9Click(Sender: TObject);
begin

  SetStatusCatraca(3);

end;

procedure TFrmCatraca.EnviarMensagemPadrao;
var
  Retorno : Integer;
begin

  LblStatus.Caption := 'Enviando Mensagem Padrao';
  Application.ProcessMessages;

  with InnerCadastrados[InnerAtual] do
  begin

    try

      Retorno := EnviarMensagemPadraoOnLine(Numero, 1, 'Modo Online');

      if (Retorno = RET_OK) then
      begin

        ShowMessage('Enviado Mensagem padrao');

        countTentativasEnvioComando := 0;
        EstadoAtual := ESTADO_CONFIGURAR_ENTRADAS_ONLINE;


      end
      else
      begin

        if (countTentativasEnvioComando >= 3) then
        begin

          EstadoAtual := ESTADO_RECONECTAR;

        end;

        Inc(countTentativasEnvioComando);

      end;

    except

      EstadoAtual := ESTADO_CONECTAR;

    end;

  end;
end;

procedure TFrmCatraca.HabilitarLadoCatraca(lado: String);
begin

  if (UpperCase(lado) = 'ENTRADA') then
  begin

    LiberaEntradaInvertida := True;
    LiberaEntrada := False;

  end
  else
  begin

    LiberaSaidaInvertida := True;
    LiberaSaida := False;

  end;

end;

procedure TFrmCatraca.CarregaIni;
var
  ArqIni: TIniFile;
  aTexto: String;
begin

  // if not ( FileExists(gsAppPath + 'ini.ini') )  then
  // begin
  //
  // ShowMessage('Arquivo inexistente');
  //
  // end
  // else
  // begin
  //
  // ShowMessage('Arquivo existente');
  //
  // end;

  try

    // aTexto := ArqIni.ReadString('Dados', 'Texto', aTexto);

    // ShowMessage(aTexto);

  finally

    ArqIni.Free;

  end;

end;

procedure TFrmCatraca.LiberarCatraca;
begin

  LblStatus.Caption := 'Liberando Giro da catraca';
  Application.ProcessMessages;

  with InnerCadastrados[InnerAtual] do
  begin

    try

      if (LiberaEntrada) then
      begin

        EnviarMensagemPadraoOnLine(Numero, 0, 'ENTRADA LIBERADA');
        LiberaEntrada := False;
        Retorno := LiberarCatracaEntrada(Numero);

      end
      else if (LiberaEntradaInvertida) then
      begin

        EnviarMensagemPadraoOnLine(Numero, 0, 'ENTRADA LIBERADA');
        LiberaEntradaInvertida := False;
        Retorno := LiberarCatracaEntradaInvertida(Numero);

      end
      else if (LiberaSaida) then
      begin

        EnviarMensagemPadraoOnLine(Numero, 0, 'SAIDA LIBERADA');
        LiberaSaida := False;
        Retorno := LiberarCatracaSaida(Numero);

      end
      else if (LiberaSaidaInvertida) then
      begin

        EnviarMensagemPadraoOnLine(Numero, 0, 'SAIDA LIBERADA');
        LiberaSaidaInvertida := False;
        Retorno := LiberarCatracaSaidaInvertida(Numero);

      end
      else
      begin

        EnviarMensagemPadraoOnLine(Numero, 0, 'LIBERADO DOIS SENTIDOS');
        Retorno := LiberarCatracaDoisSentidos(Numero);

      end;

      if (Retorno = RET_OK) then
      begin

        ShowMessage('Liberando Catraca');
        AcionarBipCurto(Numero);
        CountPingFail := 0;
        countTentativasEnvioComando := 0;
        TempoInicialPingOnLine := Now;
        EstadoAtual := ESTADO_ENVIAR_MENSAGEM;

      end
      else
      begin

        if (countTentativasEnvioComando >= 3) then
        begin

          countTentativasEnvioComando := 0;
          EstadoAtual := ESTADO_RECONECTAR;

        end;

        Inc(countTentativasEnvioComando);

      end;

    except

      EstadoAtual := ESTADO_CONECTAR;

    end;

  end;

end;

procedure TFrmCatraca.SetConfiguracaoInicialInner;
begin

  SetLength(InnerCadastrados, 1);

  InnerCadastrados[0].Numero := 1;
  InnerCadastrados[0].Catraca := True;
  InnerCadastrados[0].Biometrico := False;
  InnerCadastrados[0].QtdDigitos := 10;
  InnerCadastrados[0].CntDoEvents := 0;
  InnerCadastrados[0].Teclado := True;
  InnerCadastrados[0].PadraoCartao := 0;
  InnerCadastrados[0].ListaBio := False;
  InnerCadastrados[0].Lista := False;
  InnerCadastrados[0].Verificacao := 0;
  InnerCadastrados[0].Identificacao := 0;
  InnerCadastrados[0].DoisLeitores := False;
  InnerCadastrados[0].CountPingFail := 0;
  InnerCadastrados[0].countTentativasEnvioComando := 0;
  InnerCadastrados[0].EstadoAtual := ESTADO_CONECTAR;

end;

procedure TFrmCatraca.MaquinaDeEstados;
begin
  while (not Parar) do
  begin

    with InnerCadastrados[InnerAtual] do
    begin

      case EstadoAtual of

        ESTADO_CONECTAR:
          Conectar();

        ESTADO_ENVIAR_CFG_OFFLINE:
          EnviarConfigOffline;

        // ESTADO_COLETAR_BILHETES: ;

        ESTADO_ENVIAR_CFG_ONLINE:
          EnviarConfigOnline();

        ESTADO_ENVIAR_DATA_HORA:
          EnviarDataHora();

        ESTADO_ENVIAR_MSG_PADRAO:
          EnviarMensagemPadrao();

        ESTADO_CONFIGURAR_ENTRADAS_ONLINE:
          ConfigurarEntradasOnline();

        ESTADO_POLLING:
          Pooling();

        ESTADO_LIBERAR_CATRACA:
          LiberarCatraca();

        ESTADO_ENVIAR_BIPCURTO:
          MonitorarGiroCatraca();

        PING_ONLINE:
          EnviarPingOnline();

        ESTADO_RECONECTAR:
          Reconectar();

        // AGUARDA_TEMPO_MENSAGEM: ;
        // ESTADO_DEFINICAO_TECLADO: ;
        // ESTADO_AGUARDAR_DEFINICAO_TECLADO: ;
        // ESTADO_ENVIA_MSG_URNA: ;
        // ESTADO_MONITORA_URNA: ;
        // ESTADO_ENVIAR_MENSAGEM: ;
        // ESTADO_ENVIAR_HORARIOS: ;
        // ESTADO_ENVIAR_CONFIGS_ONLINE_OFFLINE: ;
        // ESTADO_ENVIAR_MSG_ACESSO_NEGADO: ;

        ESTADO_TRATA_CARTAO_TRATA_CONFIGS:
          TrataConfigsCartao();

        // ESTADO_VALIDAR_ACESSO: ;
        // ESTADO_VERIFICAR_SENHA: ;
        // ESTADO_ENVIAR_CONFIGMUD_ONLINE_OFFLINE: ;
      end;
    end;
  end;
end;

procedure TFrmCatraca.MonitorarGiroCatraca;
var
  Bilhete: TBilhete;
  Cartao: array [0 .. 10] of Char;
  CartaoRecebido: string;
  Tempo: TDateTime;
begin

  LblStatus.Caption := 'Monitorando Giro';
  Application.ProcessMessages;

  with InnerCadastrados[InnerAtual] do
  begin

    try

      Bilhete := TBilhete.Create;
      Bilhete.origem := 0;
      Bilhete.complemento := 0;
      Bilhete.dia := 0;
      Bilhete.mes := 0;
      Bilhete.ano := 0;
      Bilhete.hora := 0;
      Bilhete.minuto := 0;
      Bilhete.segundo := 0;

      Retorno := ReceberDadosOnLine(Numero, @Bilhete.origem,
        @Bilhete.complemento, @Bilhete.Cartao, @Bilhete.dia, @Bilhete.mes,
        @Bilhete.ano, @Bilhete.hora, @Bilhete.minuto, @Bilhete.segundo);

      if (Retorno = RET_OK) then
      begin

        if (Bilhete.origem = 5) then
        begin

          ShowMessage('Não girou');

        end
        else if (Bilhete.origem = 6) then
        begin

          if (Bilhete.complemento = 1) then
          begin

            ShowMessage('Girou para entrada');

          end
          else
          begin

            ShowMessage('Girou para saída');

          end;

        end;

        EstadoAtual := ESTADO_ENVIAR_MSG_PADRAO;

      end
      else
      begin

        Tempo := Now - TempoInicialPingOnLine;

        if (StrToInt(FormatDateTime('ss', Tempo)) >= 3) then
        begin

          EstadoSolicitacaoPingOnLine := EstadoAtual;
          countTentativasEnvioComando := 0;
          TempoInicialPingOnLine := Now;
          EstadoAtual := PING_ONLINE

        end;

      end;

    Except

      ShowMessage('Deu problema');

      EstadoAtual := ESTADO_CONECTAR;

    end;

  end;

end;

procedure TFrmCatraca.MostrarFormulario;
begin

  PnBordaImagem.Visible := True;

  LblNome.Visible := True;
  EdtNome.Visible := True;

  LblCartao.Visible := True;
  EdtCartao.Visible := True;

  LblTipoPessoa.Visible := True;
  EdtTipoPessoa.Visible := True;

  LblParcelasVencidas.Visible := True;
  EdtParcelasVencidas.Visible := True;

end;

procedure TFrmCatraca.EnviarPingOnline;
begin

  LblStatus.Caption := 'Ping Online';
  Application.ProcessMessages;

  with InnerCadastrados[InnerAtual] do
  begin

    Retorno := PingOnLine(Numero);

    try

      if (Retorno = RET_OK) then
      begin

        EstadoAtual := EstadoSolicitacaoPingOnLine;

      end
      else
      begin

        if (countTentativasEnvioComando >= 3) then
          EstadoAtual := ESTADO_RECONECTAR;

        Inc(countTentativasEnvioComando);

      end;

      TempoInicialPingOnLine := Now;

    except

      EstadoAtual := ESTADO_CONECTAR;

    end;

  end;

end;

procedure TFrmCatraca.EsconderFormulario;
begin

  PnBordaImagem.Visible := False;
  // PnFundoImagem.Visible := False;
  // ImgFotoAssociado.Visible := False;

  LblNome.Visible := False;
  EdtNome.Visible := False;

  LblCartao.Visible := False;
  EdtCartao.Visible := False;

  LblTipoPessoa.Visible := False;
  EdtTipoPessoa.Visible := False;

  LblParcelasVencidas.Visible := False;
  EdtParcelasVencidas.Visible := False;

end;

procedure TFrmCatraca.FecharConexao;
begin

  LblStatus.Caption := 'Fechando Conexão';

  with InnerCadastrados[InnerAtual] do
  begin

    EstadoAtual := ESTADO_FECHAR_CONEXAO;

    Retorno := PingOnLine(Numero);

    try

      if (Retorno = RET_OK) then
      begin

        EstadoAtual := EstadoSolicitacaoPingOnLine;

      end
      else
      begin

        if (countTentativasEnvioComando >= 3) then
          EstadoAtual := ESTADO_RECONECTAR;

        Inc(countTentativasEnvioComando);

      end;

      TempoInicialPingOnLine := Now;

    except

      EstadoAtual := ESTADO_CONECTAR;

    end;

  end;

end;

procedure TFrmCatraca.FormActivate(Sender: TObject);
begin

  SetStatusCatraca(1);

  Delay := 0;
  TmrDelay.Enabled := True;

end;

procedure TFrmCatraca.FormClose(Sender: TObject; var Action: TCloseAction);
begin

  Action := caFree;
  Release;
  FrmCatraca := nil;

end;

procedure TFrmCatraca.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
begin

  Parar := True;
  MaquinaDeEstados();

  CanClose := True;

end;

procedure TFrmCatraca.FormCreate(Sender: TObject);
begin

  CorVermelha := TColor($2E31D3);
  CorRoxa := TColor(clPurple);
  CorVerde := TColor($5CB85C);
  CorAzul := TColor($CA8B42);

  PnStatusConexao.Color := CorVermelha;
  ArqIni := TIniFile.Create(gsAppPath + 'ini.ini');

end;

procedure TFrmCatraca.GravaIni;
var
  ArqIni: TIniFile;
begin

  ArqIni := TIniFile.Create(gsAppPath + 'ini.ini');
  ShowMessage(gsAppPath);

  try

    ArqIni.WriteString('Dados', 'Texto', 'Teste');

  finally

    ArqIni.Free;

  end;

end;

procedure TFrmCatraca.Pooling;
var
  Inner, Origem, Complemento, Dia, Mes, Ano, Hora, Minuto, Segundo : Byte;
  Cartao : array[0..10] of Char;
  sBilheteRecebido: string;
  CartaoRecebido: string;
  strCartao: string;
  sNumCartao: string;
  tam: Byte;
  count: Byte;
  Tempo: TDateTime;
  Retorno : Byte;
begin

  LblStatus.Caption := 'Estado de polling';
//  SetStatusCatraca(2);
  Application.ProcessMessages;
  // PnStatusConexao.Visible := False;

   Origem := 0;
   Complemento := 0;
   Dia := 0;
   Mes := 0;
   Hora := 0;
   Minuto := 0;
   Segundo := 0;

  with InnerCadastrados[InnerAtual] do
  begin

    try

//      Retorno := ReceberDadosOnLine(Numero, @BilheteInner.origem,
//        @BilheteInner.complemento, @BilheteInner.Cartao, @BilheteInner.dia,
//        @BilheteInner.mes, @BilheteInner.ano, @BilheteInner.hora,
//        @BilheteInner.minuto, @BilheteInner.segundo);

        Retorno := ReceberDadosOnLine(Numero, @Origem, @Complemento, @Cartao, @Dia, @Mes, @Ano, @Hora, @Minuto, @Segundo);

      if (Retorno = RET_OK) then
      begin
//
//        // EstadoAtual := ESTADO_TRATA_CARTAO_TRATA_CONFIGS;
//        ShowMessage(IntToStr(Dia));
//
//        for count := 0 to Length(Cartao) do
//        begin
//          if (BilheteInner.Cartao[count] = #0) then
//          begin
//            Break;
//          end;
//          sBilheteRecebido := sBilheteRecebido + BilheteInner.Cartao[count];
//        end;
//
//        if (QtdDigitos > Length(sBilheteRecebido)) then
//        begin
//
//          tam := Length(sBilheteRecebido);
//
//        end
//        else
//        begin
//
//          tam := QtdDigitos;
//
//        end;
//
//        strCartao := '';
//
//        for count := 0 to tam - 1 do
//        begin
//
//          strCartao := strCartao + BilheteInner.Cartao[count];
//
//        end;
//
//        sNumCartao := strCartao;
//
//        if ( BuscaUsuario(sNumCartao) ) then
//        begin
//
//          HabilitarLadoCatraca('Entrada');
//          EstadoAtual := ESTADO_LIBERAR_CATRACA;
//
//        end
//        else
//        begin
//
//          EstadoAtual := ESTADO_ENVIAR_MSG_PADRAO;
//
//        end;

        ShowMessage(Cartao);
        HabilitarLadoCatraca('Entrada');
        EstadoAtual := ESTADO_LIBERAR_CATRACA;
        ShowMessage('Estado de pooling OK');



      end
      else
      begin

//        ShowMessage( IntToStr(Retorno) );
        Tempo := Now - TempoInicialPingOnLine;

        if (StrToInt(FormatDateTime('ss', Tempo)) >= 3) then
        begin

          EstadoSolicitacaoPingOnLine := EstadoAtual;
          countTentativasEnvioComando := 0;
          TempoInicialPingOnLine := Now;
          EstadoAtual := PING_ONLINE;
//
        end;

      end;

    except

      if not(BilheteInner = nil) then
      begin

        BilheteInner.Destroy;

      end;
      ShowMessage( IntToStr(Retorno) );

      EstadoAtual := ESTADO_CONECTAR;

    end;

  end;

end;

procedure TFrmCatraca.ConectaBanco;
begin

  with ScnBanco do
  begin

    try

      Close;
      ConnectionName := 'FBConnection';
      LibraryName := 'dbxfb.dll';
      GetDriverFunc := 'getSQLDriverINTERBASE';
      DriverName := 'Firebird';
      VendorLib := 'fbclient.dll';
      Params.Values['DriverName'] := 'Firebird';
      Params.Values['DataBase'] :=
        'C:\Users\Gui\Desktop\Catraca\ASSOCIADOS.FDB';
      Params.Values['RoleName'] := '';
      Params.Values['User_Name'] := 'SYSDBA';
      Params.Values['Password'] := 'masterkey';
      Params.Values['ServerCharSet'] := '';
      Params.Values['SQLDialect'] := '3';
      Params.Values['ErrorResourceFile'] := '';
      Params.Values['LocaleCode'] := '0000';
      Params.Values['BlobSize'] := '-1';
      Params.Values['CommitRetain'] := 'False';
      Params.Values['WaitOnLocks'] := 'True';
      Params.Values['InterBase TransIsolation'] := 'ReadCommited';
      Params.Values['Trim Char'] := 'False';
      Open;

    except

      on Erro: Exception do
        raise Exception.Create('Erro ao conectar ao banco de dados: ' +
          Erro.Message);

    end;

  end;

end;

procedure TFrmCatraca.Conectar;
var
  count: Integer;
begin

  count := 0;

  LblStatus.Caption := 'Tentando conectar ao inner';
  PnStatusConexao.Color := CorVermelha;
  PnStatusConexao.Visible := True;
  SetStatusCatraca(1);
  Application.ProcessMessages;

  with InnerCadastrados[InnerAtual] do
  begin

    try

      repeat

        // Tenta efetuar uma conexão com o Inner, tenta retornar a data atual
        // ShowMessage('Passo de conexão OK');
        Retorno := TestaConexaoInner(Numero);
        Sleep(20);
        Inc(count);

      until ((count > 30) or (Retorno = RET_OK));

      if Retorno = RET_OK then
      begin

        // Caso o retorno seja positivo, entra no estado de envio de configuração

        LblStatus.Caption := 'Conectado';
        // Parar := True;
        EstadoAtual := ESTADO_ENVIAR_CFG_ONLINE;
        Application.ProcessMessages;

      end
      else
      begin

        // Caso o resultado seja negativo tenta enviar mais 3 vezes
        // Se mesmo assim continuar negativo, entra em estado de reconexão

        if (countTentativasEnvioComando >= 3) then
        begin

          EstadoAtual := ESTADO_RECONECTAR;

        end;

        Inc(countTentativasEnvioComando);

      end;
    except

      EstadoAtual := ESTADO_CONECTAR;

    end;

  end;

end;

function TFrmCatraca.ConfigurarEntradaMudancasOnline(NumInner: Integer)
  : Integer;
var
  Configuracao, Leitor: String;
begin

  with InnerCadastrados[NumInner] do
  begin
    if (Teclado) then
      Configuracao := '1'
    else
      Configuracao := '0';

    if not(Biometrico) then
    begin

      if (DoisLeitores) then
        Configuracao := '010' + '001' + Configuracao
      else
        Configuracao := '000' + '011' + Configuracao;

      Configuracao := '1' + Configuracao;

    end
    else
    begin

      if (DoisLeitores) then
        Leitor := '11'
      else
        Leitor := '10';

      Configuracao := '0' + '1' + IntToStr(Identificacao) +
        IntToStr(Verificacao) + '0' + Leitor + Configuracao;

    end;

    ConfigurarEntradaMudancasOnline :=
      StrToInt(BinarioParaDecimal(Configuracao));

  end;

end;

procedure TFrmCatraca.ConfigurarEntradasOnline;
var
  ValorDecimal: Integer;
begin

  LblStatus.Caption := 'Configurando entrada Online';

  with InnerCadastrados[InnerAtual] do
  begin

    try

      ValorDecimal := ConfigurarEntradaMudancasOnline(InnerAtual);

      Retorno := EnviarFormasEntradasOnLine(Numero, QtdDigitos, 1,
        ValorDecimal, 15, 17);

      if (Retorno = RET_OK) then
      begin

        TempoInicialPingOnLine := Now;
        countTentativasEnvioComando := 0;
        EstadoAtual := ESTADO_POLLING;

      end
      else
      begin

        if (countTentativasEnvioComando >= 3) then
          EstadoAtual := ESTADO_RECONECTAR;

        Inc(countTentativasEnvioComando);

      end;

    except

      EstadoAtual := ESTADO_CONECTAR;

    end;

  end;

end;

procedure TFrmCatraca.EnviarConfigOffline;
begin
  with InnerCadastrados[InnerAtual] do
  begin

    try
      SetConfiguracaoInner(MODO_OFFLINE);

      Retorno := EnviarConfiguracoes(Numero);

      if (Retorno = RET_OK) then
      begin

        EstadoAtual := ESTADO_ENVIAR_MENSAGEM;

      end
      else
      begin

        if (countTentativasEnvioComando >= 3) then
        begin
          EstadoAtual := ESTADO_RECONECTAR;
        end;

        Inc(countTentativasEnvioComando);

      end;

    except

      EstadoAtual := ESTADO_CONECTAR;

    end;

  end;
end;

procedure TFrmCatraca.EnviarConfigOnline;
Var
  Retorno : Integer;
begin

  // Pega as configurações setadas e tenta enviar para o inner
  // Modo online

  LblStatus.Caption := 'Enviando Configurações online';
  Application.ProcessMessages;

  with InnerCadastrados[InnerAtual] do
  begin

    try

      DefinirPadraoCartao(1);
      ConfigurarInnerOnLine();
      ConfigurarAcionamento1(1, 5);
      ConfigurarAcionamento2(0, 0);
      ConfigurarLeitor1(3);
      ConfigurarLeitor2(0);
      ConfigurarTipoLeitor(0);
      DefinirQuantidadeDigitosCartao(10);
      HabilitarTeclado(1, 0);
      RegistrarAcessoNegado(1);
      DefinirFuncaoDefaultLeitoresProximidade(12);
      DefinirFuncaoDefaultSensorBiometria(0);
      ReceberDataHoraDadosOnLine(1);

      Retorno := EnviarConfiguracoes(Numero);

      if ( Retorno = RET_OK ) then
      begin

        LblStatus.Caption := 'Configurações enviadas';
        countTentativasEnvioComando := 0;
        EstadoAtual := ESTADO_ENVIAR_DATA_HORA;

      end
      else
      begin

        if (countTentativasEnvioComando >= 3) then
          EstadoAtual := ESTADO_RECONECTAR;

        Inc(countTentativasEnvioComando);

      end;
    Except
      EstadoAtual := ESTADO_CONECTAR;
    end;

  end;

end;

procedure TFrmCatraca.EnviarDataHora;
var
  Dia, Mes, Ano, Hora, Minuto, Segundo: Integer;
  Retorno : Integer;
begin

  LblStatus.Caption := 'Enviando data e hora';
  Application.ProcessMessages;


  with InnerCadastrados[InnerAtual] do
  begin

    try

      Dia := StrToInt(FormatDateTime('dd', Now));
      Mes := StrToInt(FormatDateTime('mm', Now));
      Ano := StrToInt(FormatDateTime('yy', Now));
      Hora := StrToInt(FormatDateTime('hh', Now));
      Minuto := StrToInt(FormatDateTime('nn', Now));
      Segundo := StrToInt(FormatDateTime('ss', Now));

      Retorno := EnviarRelogio(Numero, Dia, Mes, Ano, Hora, Minuto, Segundo);

      if (Retorno = RET_OK) then
      begin

        ShowMessage('Enviado Novo Relógio OK');

        countTentativasEnvioComando := 0;
        EstadoAtual := ESTADO_ENVIAR_MSG_PADRAO;


      end
      else
      begin

        if (countTentativasEnvioComando >= 3) then
        begin

          EstadoAtual := ESTADO_RECONECTAR;

        end;

        Inc(countTentativasEnvioComando);

      end;

    Except

      EstadoAtual := ESTADO_CONECTAR;

    end;

  end;

end;

procedure TFrmCatraca.Reconectar;
begin

  LblStatus.Caption := 'Tentando conectar ao inner';
  PnStatusConexao.Color := CorVermelha;
  PnStatusConexao.Visible := True;

  Application.ProcessMessages;

  // Estado de reconexão, fica tentando conectar até que consiga uma resposta

  with InnerCadastrados[InnerAtual] do
  begin

    Retorno := TestaConexaoInner(Numero);

    if Retorno = RET_OK then
    begin

      // Caso consiga uma conexão entra no estado de enviar configurações online

      LblStatus.Caption := 'Conectado';
      // Parar := True;
      Application.ProcessMessages;
      countTentativasEnvioComando := 0;
      EstadoAtual := ESTADO_ENVIAR_CFG_ONLINE;

    end

  end;
end;

function TFrmCatraca.TestaConexaoInner(NumInner: Integer): Integer;
var
  dia: Byte;
  mes: Byte;
  ano: Byte;
  hora: Byte;
  minuto: Byte;
  segundo: Byte;
begin
  dia := 0;
  mes := 0;
  ano := 0;
  hora := 0;
  minuto := 0;
  segundo := 0;

  // Tenta conexão pedindo as configurações de data e hora do inner.

  TestaConexaoInner := ReceberRelogio(NumInner, @dia, @mes, @ano, @hora,
    @minuto, @segundo);

  Application.ProcessMessages;

end;

procedure TFrmCatraca.TmrDelayTimer(Sender: TObject);
begin

  Inc(Delay);

  if (Delay = 3) then
  begin

    SetConfiguracaoInicialInner();

    // Tenta abrir conexão com a porta padrão
    Retorno := AbrirConexao();
//     retorno := 0;
    InnerAtual := 0;

    // Caso Consiga, ele entra na maquina de estados
    if (Retorno = RET_OK) then
    begin

      Parar := False;
      MaquinaDeEstados();

    end;

  end;

end;

procedure TFrmCatraca.TmrStatusCatracaTimer(Sender: TObject);
begin

  LblStatus.Left := LblStatus.Left - 20;

  if (LblStatus.Left <= 0 - LblStatus.Width) then
    LblStatus.Left := PnStatusCatraca.Width;

end;

procedure TFrmCatraca.TrataConfigsCartao;
begin

end;

end.
